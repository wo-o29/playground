/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/schedule/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일정 상세보기
         * @description 등록된 일정의 상세 정보를 조회합니다.
         */
        get: operations["getScheduleById"];
        /**
         * 일정 수정
         * @description 등록된 일정을 정보를 수정합니다.
         */
        put: operations["updateSchedule"];
        post?: never;
        /**
         * 일정 삭제
         * @description 등록된 일정을 삭제합니다.
         */
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification/{notificationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 알림 확인 여부 변경
         * @description 알림온 회원의 확인 여부를 변경합니다.
         */
        put: operations["updateIsChecked"];
        post?: never;
        /**
         * 알림 삭제
         * @description 회원이 확인한 알림을 삭제합니다.
         */
        delete: operations["notificationWithdrawal"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/info/{crewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 그룹 정보 수정
         * @description 그룹의 정보를 수정합니다.
         */
        put: operations["updateCrewBasicInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/delegate-owner/{crewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 그룹장 권한 위임
         * @description 그룹장 권한을 멤버에게 위임합니다.
         */
        put: operations["delegateOwner"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account-info/{accountId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 회원 이메일 조회
         * @description 로그인 한 회원의 이메일을 조회합니다.
         */
        get: operations["findAccountEmail"];
        /**
         * 회원 정보 수정
         * @description 로그인 한 회원의 정보를 수정합니다.
         */
        put: operations["updateAccountInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 마이페이지 일정 조율 투표 알림 조회
         * @description 마이페이지 일정 조율 정보(투표 현황) 알림을 조회합니다.
         */
        get: operations["findMypageVoteNotification"];
        put?: never;
        /**
         * 일정 조율 생성 (투표 생성)
         * @description 그룹의 회원이 일정 조율(투표)을 생성합니다.
         */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vote/{voteSubjectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 일정 조율 투표 (참석자)
         * @description 참석자는 일정 조율 생성된 정보를 투표할 수 있습니다.
         */
        post: operations["setVote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * kakao 토큰 재발급
         * @description 만료된 토큰을 재발급 합니다.
         */
        post: operations["setRefreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 일정 등록
         * @description 일정을 등록합니다.
         */
        post: operations["createSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 알림 조회
         * @description 로그인 한 회원의 전체 알림을 조회합니다.
         */
        get: operations["getInvite"];
        put?: never;
        /**
         * 그룹 초대 알림 수락/거절
         * @description 그룹 초대가 온 회원이 수락/거절을 선택합니다.
         */
        post: operations["setInviteAccept"];
        /**
         * 그룹 초대 삭제
         * @description 잘못 초대한 회원을 그룹에서 삭제합니다.
         */
        delete: operations["inviteWithdrawal"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail/send/{crewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 발송
         * @description 회원 가입 되어 있는 회원을 그룹에 초대하면 이메일이 발송됩니다.
         */
        post: operations["setInviteCrew"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description 로그인 한 회원의 토큰을 삭제합니다.
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 그룹 생성
         * @description 로그인 한 회원이 원하는 그룹을 생성합니다.
         */
        post: operations["create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원 추가 정보 입력
         * @description 로그인 한 회원의 추가 정보를 등록합니다.
         */
        post: operations["updateAccountInfo_1"];
        /**
         * 회원 탈퇴
         * @description 해당 토큰을 가진 회원을 탈퇴합니다.
         */
        delete: operations["accountWithdrawal"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account-info/img": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원 추가 정보 이미지 등록
         * @description 로그인 한 회원의 추가 정보 이미지를 등록합니다.
         */
        post: operations["updateAccountInfo_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vote/{crewId}/{voteSubjectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일정 조율 투표 정보 조회
         * @description 일정 조율 정보(투표 현황) 조회합니다.
         */
        get: operations["findVoteState"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vote/participant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일정 조율 참석자 일정 리스트
         * @description 일정 조율 참석자의 일정 있는 리스트를 조회합니다.
         */
        get: operations["findParticipantTime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedule/filter/{crewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일정 조회
         * @description 선택한 그룹, 기간의 일정 중 사용자가 참석자로 포함된 일정을 조회합니다.
         */
        get: operations["getFilteredSchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login/oauth2/code/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google 로그인
         * @description 로그인 한 회원의 정보를 등록합니다.
         */
        get: operations["googleLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login/oauth/kakao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * kakao 로그인
         * @description 로그인 한 회원의 정보를 등록합니다.
         */
        get: operations["kakaoLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboard/upcoming-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 다가오는 일정 조회
         * @description 사용자가 포함된 다가오는 일정 중 최근 10개의 일정을 조회합니다.
         */
        get: operations["getUpcomingEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/{crewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 그룹 상세 정보 조회
         * @description 특정 그룹의 상세 정보를 조회합니다.
         */
        get: operations["getCrewDetails"];
        put?: never;
        post?: never;
        /**
         * 그룹 삭제
         * @description 그룹장이 그룹을 삭제합니다.
         */
        delete: operations["deleteCrew"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/all-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 사용자가 속한 그룹 전체 조회
         * @description 사용자가 속한 그룹을 전체 조회합니다.
         */
        get: operations["getCrewAllInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account-info/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 회원 추가 정보 조회
         * @description 로그인 한 회원의 정보를 조회합니다.
         */
        get: operations["findAccountInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/remove-member/{crewId}/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 그룹 내보내기
         * @description 그룹장이 멤버를 탈퇴시킵니다.
         */
        delete: operations["removeMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/leave/{crewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 그룹 나가기
         * @description 사용자가 그룹을 탈퇴합니다.
         */
        delete: operations["leaveCrew"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description 참석자
         * @example [
         *       {
         *         "accountId": 1,
         *         "nickName": "User1"
         *       },
         *       {
         *         "accountId": 2,
         *         "nickName": "User2"
         *       }
         *     ]
         */
        ParticipantInfo: {
            /** Format: int64 */
            accountId?: number;
            nickName?: string;
        };
        ScheduleRequest: {
            /**
             * @description 일정명
             * @example 회의
             */
            title?: string;
            /**
             * Format: date-time
             * @description 시작일시
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description 종료일시
             */
            endDateTime?: string;
            /**
             * @description 위치
             * @example 회의실 A
             */
            location?: string;
            /**
             * @description 설명
             * @example 프로젝트 회의
             */
            description?: string;
            /**
             * Format: int64
             * @description 그룹ID
             * @example 1
             */
            crewId?: number;
            /**
             * @description 참석자
             * @example [
             *       {
             *         "accountId": 1,
             *         "nickName": "User1"
             *       },
             *       {
             *         "accountId": 2,
             *         "nickName": "User2"
             *       }
             *     ]
             */
            participants?: components["schemas"]["ParticipantInfo"][];
        };
        /**
         * @description 그룹정보
         * @example {
         *       "crewId": 1,
         *       "crewName": "코드잇",
         *       "labelColor": "F5C92E"
         *     }
         */
        CrewInfo: {
            /** Format: int64 */
            crewId?: number;
            crewName?: string;
            labelColor?: string;
        };
        ScheduleResponse: {
            /**
             * Format: int64
             * @description 일정ID
             * @example 1
             */
            scheduleId?: number;
            /**
             * @description 일정명
             * @example 회의
             */
            title?: string;
            /**
             * Format: date-time
             * @description 시작일시
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description 종료일시
             */
            endDateTime?: string;
            /**
             * @description 위치
             * @example 회의실 A
             */
            location?: string;
            /**
             * @description 설명
             * @example 프로젝트 회의
             */
            description?: string;
            crewInfo?: components["schemas"]["CrewInfo"];
            /**
             * @description 참석자
             * @example [
             *       {
             *         "accountId": 1,
             *         "nickName": "User1"
             *       },
             *       {
             *         "accountId": 2,
             *         "nickName": "User2"
             *       }
             *     ]
             */
            participants?: components["schemas"]["ParticipantInfo"][];
            coordinate?: boolean;
        };
        IsCheckedRequest: {
            /**
             * @description 알림 여부 확인
             * @example false
             */
            isChecked?: boolean;
            /**
             * @description 알림 타입
             * @example CREW, SCHEDULE
             */
            alarmType?: string;
        };
        CrewRequest: {
            /**
             * @description 그룹 이름
             * @example 코드잇
             */
            crewName?: string;
            /**
             * @description 그룹 색상
             * @example F5C92E
             */
            labelColor?: string;
        };
        CrewAllInfo: {
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * @description 그룹 이름
             * @example 코드잇
             */
            crewName?: string;
            /**
             * @description 그룹 색상
             * @example F5C92E
             */
            labelColor?: string;
        };
        CrewMemberInfoResponse: {
            /**
             * @description 그룹 권한
             * @example OWNER
             */
            role?: string;
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 닉네임
             * @example 밍밍
             */
            nickName?: string;
            /**
             * @description 이메일
             * @example test@test.com
             */
            email?: string;
            /** @description imgUrl */
            image?: string;
        };
        AccountInfoRequest: {
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 회원 닉네임
             * @example 밍밍
             */
            nickName?: string;
            /**
             * @description 회원 전화번호
             * @example 01012345678
             */
            phoneNumber?: string;
            /** @description imgUrl */
            imgUrl?: string;
        };
        AccountInfoResponse: {
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /** @description imgUrl */
            image?: string;
            /**
             * @description 회원 이메일
             * @example test@test.com
             */
            email?: string;
            /**
             * @description 회원 닉네임
             * @example 밍밍
             */
            nickName?: string;
            /**
             * @description 회원 전화번호
             * @example 01012345678
             */
            phoneNumber?: string;
        };
        /**
         * @description 일정 조율 마감 시간
         * @example 17:00:00
         */
        LocalTime: {
            /** Format: int32 */
            hour?: number;
            /** Format: int32 */
            minute?: number;
            /** Format: int32 */
            second?: number;
            /** Format: int32 */
            nano?: number;
        };
        VoteDateList: {
            /**
             * Format: date
             * @description 일정 조율 날짜
             * @example 2024-06-20
             */
            voteDate?: string;
            voteStartTime?: components["schemas"]["LocalTime"];
            voteEndTime?: components["schemas"]["LocalTime"];
        };
        VoteSubjectRequest: {
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * @description 일정 조율 제목
             * @example 코드잇 회의
             */
            title?: string;
            /**
             * @description 일정 조율 내용
             * @example ㅇㅇ기획 회의
             */
            content?: string;
            /**
             * @description 장소
             * @example 회의실2
             */
            place?: string;
            voteDateLists?: components["schemas"]["VoteDateList"][];
            /**
             * Format: date
             * @description 일정 조율 마감 날짜
             * @example 2024-06-20
             */
            endDate?: string;
            endTime?: components["schemas"]["LocalTime"];
            accountIds?: number[];
        };
        VoteStateRequest: {
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            voteStateIds?: number[];
        };
        RefreshTokenRequest: {
            refresh?: string;
        };
        TokenResponse: {
            /** Format: int64 */
            id?: number;
            grantType?: string;
            accessToken?: string;
            /** Format: date-time */
            accessTokenExpireAt?: string;
            refreshToken?: string;
            /** Format: date-time */
            refreshTokenExpireAt?: string;
            isComplete?: boolean;
            accountEmail?: string;
            img?: string;
            nickName?: string;
            phoneNumber?: string;
        };
        NotificationRequest: {
            /**
             * Format: int64
             * @description 알림 id
             * @example 1
             */
            notificationId?: number;
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * @description 그룹 초대 상태값
             * @example ACCEPT,DECLINE,WAIT
             * @enum {string}
             */
            inviteType?: "ACCEPT" | "DECLINE" | "WAIT";
        };
        InviteNotificationResponse: {
            /**
             * Format: int64
             * @description 회원 Id
             * @example 1
             */
            accountId?: number;
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * @description 그룹 초대 상태값
             * @example ACCEPT,DECLINE,WAIT
             * @enum {string}
             */
            inviteType?: "ACCEPT" | "DECLINE" | "WAIT";
        };
        SendEmail: {
            email?: string;
        };
        CrewCreateResponse: {
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 그룹 id
             * @example 1
             */
            crewName?: string;
            /**
             * @description 그룹 색상
             * @example F5C92E
             */
            labelColor?: string;
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
        };
        AccountImgUrlResponse: {
            imgUrl?: string;
        };
        CoordinationNotificationResponse: {
            /**
             * Format: int64
             * @description isChecked가 false인 개수
             * @example 1
             */
            count?: number;
            voteNotificationResponseList?: components["schemas"]["VoteNotificationResponse"][];
        };
        VoteNotificationResponse: {
            /**
             * Format: int64
             * @description 알림 id
             * @example 1
             */
            notificationId?: number;
            /**
             * @description 알림 타입
             * @example INVITE, SCHEDULE
             */
            notificationType?: string;
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 그룹 이름
             * @example 코드잇
             */
            crewName?: string;
            /**
             * Format: date-time
             * @description 알림 온 시간
             */
            localDateTime?: string;
            /**
             * @description 알림 확인 여부
             * @example false
             */
            isChecked?: boolean;
            /**
             * Format: int64
             * @description 투표 id
             * @example 1
             */
            voteId?: number;
            /**
             * @description 일정 조율(투표) 제목
             * @example 코드잇 회의
             */
            voteTitle?: string;
            endTime?: components["schemas"]["LocalTime"];
            /**
             * Format: date
             * @description 일정 조율(투표) 마감 날짜
             * @example 2024-06-19
             */
            endDate?: string;
            /**
             * @description 회원 투표 여부
             * @example false
             */
            voteParticipateType?: boolean;
        };
        VoteDateListResponse: {
            /**
             * Format: int64
             * @description 일정 조율 현황 id
             * @example 1
             */
            voteStateId?: number;
            /**
             * Format: date
             * @description 일정 조율 날짜
             * @example 2024-06-20
             */
            voteDate?: string;
            voteStartTime?: components["schemas"]["LocalTime"];
            voteEndTime?: components["schemas"]["LocalTime"];
            /**
             * Format: int32
             * @description 투표 개수
             * @example 1
             */
            voteCount?: number;
        };
        VoteListResponse: {
            /**
             * Format: int64
             * @description 회원id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 닉네임
             * @example 밍밍
             */
            nickName?: string;
            /**
             * @description 참석자 투표 완료 여부
             * @example false
             */
            voteParticipateType?: boolean;
        };
        VoteStateResponse: {
            /**
             * @description 일정 조율 제목
             * @example 코드잇 회의
             */
            title?: string;
            /**
             * @description 일정 조율 내용
             * @example ㅇㅇ기획 회의
             */
            content?: string;
            /**
             * @description 장소
             * @example 회의실2
             */
            place?: string;
            /**
             * Format: int64
             * @description 그룹id
             * @example 1
             */
            crewId?: number;
            /**
             * @description 그룹 이름
             * @example 코드잇
             */
            crewName?: string;
            /**
             * @description 그룹 색상
             * @example F5C92E
             */
            crewLabelColor?: string;
            /**
             * Format: int64
             * @description 일정 조율 생성자 id
             * @example 1
             */
            creatorId?: number;
            /**
             * @description 일정 조율 생성자 닉네임
             * @example 밍밍
             */
            creatorNickName?: string;
            voteListResponses?: components["schemas"]["VoteListResponse"][];
            endTime?: components["schemas"]["LocalTime"];
            /**
             * Format: date
             * @description 일정 조율 마감 날짜
             * @example 2024-06-19
             */
            endDate?: string;
            voteDateListResponses?: components["schemas"]["VoteDateListResponse"][];
            /**
             * Format: int64
             * @description 마감까지 남은 시간
             */
            remainTime?: number;
        };
        ParticipantTime: {
            /**
             * Format: date-time
             * @description 회원의 등록된 일정 시작 날짜 및 시간
             */
            haveStartDateTime?: string;
            /**
             * Format: date-time
             * @description 회원의 등록된 일정 마감 날짜 및 시간
             */
            haveEndDateTime?: string;
        };
        VoteParticipantTimeList: {
            participantTimes?: components["schemas"]["ParticipantTime"][];
        };
        NotificationInfo: {
            /**
             * Format: int64
             * @description 알림 id
             * @example 1
             */
            notificationId?: number;
            /**
             * @description 알림 메시지 타입
             * @example INVITE, SCHEDULE_INFO, REQUEST, UPDATE, EXCLUDE
             */
            notificationType?: string;
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * @description 그룹 색상
             * @example F5C92E
             */
            labelColor?: string;
            /**
             * @description 그룹 이름
             * @example 코드잇
             */
            crewName?: string;
            scheduleInfo?: components["schemas"]["ScheduleInfo"];
            /**
             * Format: date-time
             * @description 알림 온 시간
             */
            localDateTime?: string;
            /**
             * @description 알림 확인 여부
             * @example false
             */
            isChecked?: boolean;
            /**
             * @description content
             * @example content
             */
            content?: string;
            /**
             * @description 알림 타입
             * @example CREW, SCHEDULE
             * @enum {string}
             */
            alarmType?: "CREW" | "SCHEDULE";
        };
        NotificationResponse: {
            /**
             * Format: int64
             * @description isChecked가 false인 개수
             * @example 1
             */
            count?: number;
            notificationInfo?: components["schemas"]["NotificationInfo"][];
        };
        ScheduleInfo: {
            /**
             * Format: int64
             * @description 일정 id
             * @example 1
             */
            scheduleId?: number;
            /**
             * @description 일정 제목
             * @example 코드잇 회의
             */
            title?: string;
        };
        EventInfo: {
            /**
             * Format: int64
             * @description 일정ID
             * @example 1
             */
            scheduleId?: number;
            /**
             * @description 일정명
             * @example 회의
             */
            title?: string;
            /**
             * Format: date-time
             * @description 시작일시
             */
            startDateTime?: string;
            /**
             * @description 남은시간
             * @example D-1, D-DAY
             */
            remainTime?: string;
            crewInfo?: components["schemas"]["CrewAllInfo"];
        };
        CrewDetailResponse: {
            /**
             * @description 그룹 이름
             * @example 코드잇
             */
            crewName?: string;
            /**
             * @description 그룹 색상
             * @example F5C92E
             */
            labelColor?: string;
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            crewMembers?: components["schemas"]["CrewMemberInfoResponse"][];
            waitingMembers?: components["schemas"]["CrewWaitingMemberInfo"][];
        };
        CrewWaitingMemberInfo: {
            /**
             * Format: int64
             * @description 알림 id
             * @example 1
             */
            notificationId?: number;
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 닉네임
             * @example 홍길동
             */
            nickName?: string;
            /**
             * @description 이메일
             * @example test@test.com
             */
            email?: string;
        };
        CrewAllResponse: {
            crewAllInfos?: components["schemas"]["CrewAllInfo"][];
        };
        AccountResponse: {
            /**
             * @description 회원 이메일
             * @example test@test.com
             */
            email?: string;
        };
        MessageResponse: {
            /**
             * Format: int64
             * @description 일정ID
             * @example 1
             */
            scheduleId?: number;
            /**
             * @description 메시지
             * @example 일정이 성공적으로 삭제되었습니다.
             */
            message?: string;
        };
        InviteAcceptWitdrawlRequest: {
            /**
             * Format: int64
             * @description 그룹 id
             * @example 1
             */
            crewId?: number;
            /**
             * Format: int64
             * @description 회원 id
             * @example 1
             */
            accountId?: number;
            /**
             * @description 그룹 초대 상태값
             * @example ACCEPT, DECLINE, WAIT
             * @enum {string}
             */
            crewAccept?: "ACCEPT" | "DECLINE" | "WAIT";
        };
        CrewMessageResponse: {
            /**
             * Format: int64
             * @description 그룹ID
             * @example 1
             */
            crewId?: number;
            /**
             * @description 메시지
             * @example 그룹이 성공적으로 삭제되었습니다.
             */
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getScheduleById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleResponse"];
                };
            };
        };
    };
    updateSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleResponse"];
                };
            };
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MessageResponse"];
                };
            };
        };
    };
    updateIsChecked: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IsCheckedRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    notificationWithdrawal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    updateCrewBasicInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrewRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewAllInfo"];
                };
            };
        };
    };
    delegateOwner: {
        parameters: {
            query: {
                memberId: number;
            };
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewMemberInfoResponse"];
                };
            };
        };
    };
    findAccountEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accountId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AccountResponse"];
                };
            };
        };
    };
    updateAccountInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accountId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountInfoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AccountInfoResponse"];
                };
            };
        };
    };
    findMypageVoteNotification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CoordinationNotificationResponse"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VoteSubjectRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                voteSubjectId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VoteStateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setRefreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    createSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleResponse"];
                };
            };
        };
    };
    getInvite: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NotificationResponse"];
                };
            };
        };
    };
    setInviteAccept: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["InviteNotificationResponse"];
                };
            };
        };
    };
    inviteWithdrawal: {
        parameters: {
            query: {
                inviteAcceptWitdrawlRequest: components["schemas"]["InviteAcceptWitdrawlRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    setInviteCrew: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendEmail"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    create_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrewRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewCreateResponse"];
                };
            };
        };
    };
    updateAccountInfo_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AccountInfoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    accountWithdrawal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    updateAccountInfo_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    multipartFile?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AccountImgUrlResponse"];
                };
            };
        };
    };
    findVoteState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
                voteSubjectId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VoteStateResponse"];
                };
            };
        };
    };
    findParticipantTime: {
        parameters: {
            query: {
                participantId: number[];
                selectedDates: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VoteParticipantTimeList"];
                };
            };
        };
    };
    getFilteredSchedules: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
            };
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleResponse"][];
                };
            };
        };
    };
    googleLogin: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    kakaoLogin: {
        parameters: {
            query: {
                code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TokenResponse"];
                };
            };
        };
    };
    getUpcomingEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EventInfo"][];
                };
            };
        };
    };
    getCrewDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewDetailResponse"];
                };
            };
        };
    };
    deleteCrew: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewMessageResponse"];
                };
            };
        };
    };
    getCrewAllInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewAllResponse"];
                };
            };
        };
    };
    findAccountInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AccountInfoResponse"];
                };
            };
        };
    };
    removeMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewMessageResponse"];
                };
            };
        };
    };
    leaveCrew: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                crewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CrewMessageResponse"];
                };
            };
        };
    };
}
